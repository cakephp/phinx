name: CI

on:
  push:
    branches:
      - '0.x'
      - '1.x'
  pull_request:

jobs:
  testsuite:
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        php-version: ['8.1', '8.2']
        db-type: [sqlite, mysql, pgsql]
        prefer-lowest: ['']
        include:
          - php-version: '8.3'
            db-type: sqlite
            prefer-lowest: ''
          - php-version: '8.1'
            db-type: sqlite
            prefer-lowest: prefer-lowest

    steps:
    - name: Setup MySQL latest
      if: matrix.db-type == 'mysql' && matrix.php-version != '8.1'
      run: docker run --rm --name=mysqld -e MYSQL_ROOT_PASSWORD=root -e MYSQL_DATABASE=cakephp -p 3306:3306 -d mysql:8.3

    - name: Setup MySQL 5.6
      if: matrix.db-type == 'mysql' && matrix.php-version == '8.1'
      run: docker run --rm --name=mysqld -e MYSQL_ROOT_PASSWORD=root -e MYSQL_DATABASE=cakephp -p 3306:3306 -d mysql:5.6 --character-set-server=utf8

    - name: Setup PostgreSQL latest
      if: matrix.db-type == 'pgsql' && matrix.php-version != '8.1'
      run: docker run --rm --name=postgres -e POSTGRES_PASSWORD=postgres -e POSTGRES_DB=cakephp -p 5432:5432 -d postgres

    - name: Setup PostgreSQL 9.4
      if: matrix.db-type == 'pgsql' && matrix.php-version == '8.1'
      run: docker run --rm --name=postgres -e POSTGRES_PASSWORD=postgres -e POSTGRES_DB=cakephp -p 5432:5432 -d postgres:9.4

    - uses: actions/checkout@v4

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: ${{ matrix.php-version }}
        coverage: pcov
        ini-values: zend.assertions=1, error_reporting=-1, display_errors=On

    - name: Get composer cache directory
      id: composer-cache
      run: echo "::set-output name=dir::$(composer config cache-files-dir)"

    - name: Get date part for cache key
      id: key-date
      run: echo "::set-output name=date::$(date +'%Y-%m')"

    - name: Cache composer dependencies
      uses: actions/cache@v4
      with:
        path: ${{ steps.composer-cache.outputs.dir }}
        key: ${{ runner.os }}-composer-${{ steps.key-date.outputs.date }}-${{ hashFiles('composer.json') }}-${{ matrix.prefer-lowest }}

    - name: Composer install
      run: |
        if ${{ matrix.prefer-lowest == 'prefer-lowest' }}; then
          composer update --prefer-lowest --prefer-stable
        else
          composer install
        fi

    - name: Setup problem matchers for PHPUnit
      if: matrix.php-version == '8.1' && matrix.db-type == 'mysql'
      run: echo "::add-matcher::${{ runner.tool_cache }}/phpunit.json"

    - name: Setup Database
      run: |
        if [[ ${{ matrix.db-type }} == 'mysql' ]]; then
          n=0
          until [ "$n" -ge 5 ]
          do
            mysql -h 127.0.0.1 -u root -proot -e 'CREATE DATABASE phinx;' && break || :
            n=$((n+1))
            sleep 2
          done
          mysql -h 127.0.0.1 -u root -proot -D phinx -e 'SELECT 1;'
        fi
        if [[ ${{ matrix.db-type }} == 'pgsql' ]]; then psql -c 'CREATE DATABASE phinx;' postgresql://postgres:postgres@127.0.0.1; fi

    - name: Run PHPUnit
      run: |
        if [[ ${{ matrix.db-type }} == 'sqlite' ]]; then export SQLITE_DSN='sqlite:///phinx'; fi
        if [[ ${{ matrix.db-type }} == 'mysql' ]]; then export MYSQL_DSN='mysql://root:root@127.0.0.1/phinx'; fi
        if [[ ${{ matrix.db-type }} == 'pgsql' ]]; then export PGSQL_DSN='pgsql://postgres:postgres@127.0.0.1/phinx'; fi

        if [[ ${{ matrix.php-version }} == '8.2' ]]; then
          export CODECOVERAGE=1 && vendor/bin/phpunit --verbose --coverage-clover=coverage.xml
        else
          vendor/bin/phpunit
        fi

    - name: Prefer lowest check
      if: matrix.prefer-lowest == 'prefer-lowest'
      run: composer require --dev dereuromark/composer-prefer-lowest && vendor/bin/validate-prefer-lowest -m

    - name: Submit code coverage
      if: matrix.php-version == '8.2'
      uses: codecov/codecov-action@v4

  testsuite-windows:
    runs-on: windows-2022
    name: Windows - PHP 8.1 & SQL Server

    env:
      EXTENSIONS: mbstring, intl, pdo_sqlsrv
      PHP_VERSION: '8.1'

    steps:
    - uses: actions/checkout@v4

    - name: Get date part for cache key
      id: key-date
      run: echo "::set-output name=date::$(date +'%Y-%m')"

    - name: Setup PHP extensions cache
      id: php-ext-cache
      uses: shivammathur/cache-extensions@v1
      with:
        php-version: ${{ env.PHP_VERSION }}
        extensions: ${{ env.EXTENSIONS }}
        key: ${{ steps.key-date.outputs.date }}

    - name: Cache PHP extensions
      uses: actions/cache@v4
      with:
        path: ${{ steps.php-ext-cache.outputs.dir }}
        key: ${{ runner.os }}-php-ext-${{ steps.php-ext-cache.outputs.key }}
        restore-keys: ${{ runner.os }}-php-ext-${{ steps.php-ext-cache.outputs.key }}

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: ${{ env.PHP_VERSION }}
        extensions: ${{ env.EXTENSIONS }}
        ini-values: apc.enable_cli=1, extension=php_fileinfo.dll, zend.assertions=1, error_reporting=-1, display_errors=On
        coverage: pcov

    - name: Setup SQLServer
      run: |
        # MSSQLLocalDB is the default SQL LocalDB instance
        SqlLocalDB start MSSQLLocalDB
        SqlLocalDB info MSSQLLocalDB
        sqlcmd -S "(localdb)\MSSQLLocalDB" -Q "create database phinx;"

    - name: Get composer cache directory
      id: composer-cache
      run: echo "::set-output name=dir::$(composer config cache-files-dir)"

    - name: Cache composer dependencies
      uses: actions/cache@v4
      with:
        path: ${{ steps.composer-cache.outputs.dir }}
        key: ${{ runner.os }}-composer-${{ steps.key-date.outputs.date }}-${{ hashFiles('composer.json') }}-${{ matrix.prefer-lowest }}

    - name: Composer install
      run: composer update

    - name: Run PHPUnit
      env:
        SQLSRV_DSN: 'sqlsrv://(localdb)\MSSQLLocalDB/phinx'
        CODECOVERAGE: 1
      run: |
          vendor/bin/phpunit --verbose --coverage-clover=coverage.xml

    - name: Submit code coverage
      uses: codecov/codecov-action@v4

  cs-stan:
    name: Coding Standard & Static Analysis
    runs-on: ubuntu-22.04

    steps:
    - uses: actions/checkout@v4

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.1'
        coverage: none

    - name: Get composer cache directory
      id: composer-cache
      run: echo "::set-output name=dir::$(composer config cache-files-dir)"

    - name: Get date part for cache key
      id: key-date
      run: echo "::set-output name=date::$(date +'%Y-%m')"

    - name: Cache composer dependencies
      uses: actions/cache@v4
      with:
        path: ${{ steps.composer-cache.outputs.dir }}
        key: ${{ runner.os }}-composer-${{ steps.key-date.outputs.date }}-${{ hashFiles('composer.json') }}

    - name: Composer install
      run: composer stan-setup

    - name: Run PHP CodeSniffer
      run: vendor/bin/phpcs

    - name: Run phpstan
      if: always()
      run: vendor/bin/phpstan.phar analyse --error-format=github
